Java는 객체 지향적이고 배우기 쉬우며 플랫폼 독립적인 언어로, 고성능 애플리케이션 개발에 탁월하다.
(JVM이 설치된 모든 장치에서 동작)
사용 분야: 기업 애플리케이션, 과학 연구 분야 솔루션, 금융 애플리케이션, 빅데이터 솔루션, 머신러닝
Java 장점: 개발자가 쉽게 코드작성 및 실행, 강력한 디버깅 제공, 기존 코드의 재사용 및 모듈식 프로그램 개발 가능. 보안에 강함.
Java 단점: 다른 언어보다도 실행 속도가 느림. node js와는 달리 수정사항 발생 시 수정 및 백업 작업이 오래 걸려 저장 장치를 포함한 백업 시스템을 필요로 하는 경우 부적합.(저장에 중점). 코드 작성의 난이도가 꽤 있다.
https://yozm.wishket.com/magazine/detail/1555/

Spring Boot?
Java로 만든 서버 애플리케이션.
Java는 유구한 역사를 가지고 있고 지금도 많이 사용되는 언어라 스프링부트를 사용하면 Java 언어에서 있는 기능을 그대로 사용할 수 있다. Java를 개발해본 사람들은 쉽게 Spring Boot에 적응 할 수 있다. 그리고 역사가 오래 됐기 때문에 개발하는데 필요한 왠만한 라이브러리는 모두 Spring Boot에 다 있다. 안드로이드 개발자가 사용한 자바 라이브러리들은 모두 Spring에서도 찾을 수 있다고 볼 수 있고 추가로 서버 개발자들이 어려움을 겪는 데이터베이스 관리도 스프링부트에서는 JPA라는 라이브러리를 통해 간소화 해둬서 손쉽게 다룰 수 있다. 그리고 Java이기 때문에 TypeSafe 하다. 리팩토링하거나 확장 할 때 IDE를 이용해서 수정할 점을 빠르게 체크 할 수 있는데 프로젝트 규모가 커지고 안정성이 중요해지는 시점부터는 큰 장점으로 다가온다. 내부적으로는 Multi Threading을 지원하는 구조로 짜여있어서 길고 반복적인 업무를 처리할 때 효율적이다. 많은 양의 컴퓨팅이 필요한 경우 잘 써먹으면 좋다.

단점
Spring Boot는 러닝 커브가 존재한다. Node.js는 처음 배우는 사람도 하루만에 서버 구동하고 api도 하나 만들 수 있는데 Spring Boot를 공부하면 Service, Controller, Repository 에 대해서 알아야하고 각 컴포넌트는 어떤식으로 채워야하는지 공부가 필요해 해야 할 게 많다. Spring Boot에서는 좋은 구조를 유도하기 위해 이런 형태의 디자인을 권장하는데 초심자한테는 러닝 커브가 좀 있다. 그리고 boilerplate 코드가 많다. 스프링에서 권장하는 구조랑 라이브러리들을 사용하려면 이런 저런 코드를 만들어야 하는데 처음에는 어려우나 숙달되면 귀찮아진다. 그래도 안쓰는 것 보다 낫긴 하지만. 내부적으로는 메모리를 좀 많이 쓴다. Multi thread 환경이기 때문에 여러개의 Thread를 띄우다 보니까 어쩔 수 없이 생긴 문제.


Node js 의 장점과 단점
장점
성능 관점
싱글 스레드 기반 비동기 IO처리로 매우 빠른 고성능 서버이다.
CPU intensive하지 않고, 많은 Connection을 동시에 처리해야 하는 상황에서 nodejs의 성능이 좋다.
브라우저 외 다른 용도의 서버로도 사용 가능하다.
restart 시간이 1초 미안이기 때문에 프로세스가 종료되어도 빠르게 다시 시작할 수 있고, 빠른 배포나 업그레이드 작업이 가능하다.

생산성 관점
JS는 자바와 같은 프로그래밍 언어보다 생산성이 좋다. 같은 서버 코드를 짜는데 걸리는 시간이 적다.
낮은 learning curve
프론트엔드와 백엔드 기술의 통합 : 프론트엔드 개발자들도 js 기술을 가지고 서버 백엔드를 개발할 수 있게 된다. 따라서 의사 소통 비용을 줄일 수 있다.
싱글 스레드기 때문에 스레드간의 동기화 처리 등의 복잡한 과정을 생략할 수 있다.

개발과 운영 도구
아파치 등 별도의 소프트웨어 없이 http 서버 라이브러리를 포함하여 웹 서버 동작이 가능하다.
socket.io API만 이용하면 싱글 스레드 기반 멀티 플랙싱을 기반으로 대용량 사용자에 대한 푸쉬 처리를 가능하게 한다. (WAS는 쓰레드 수 만큼 밖에 동시 connection처리를 할 수 없다 )
서버 플랫폼으로서 높은 인기를 가지고 있어 개발자 커뮤니티가 활성화 되어있고, npm을 통해 왠만한 기능은 이미 다른 개발자가 모듈로 구현해 두었다.

단점
싱글 스레드 모델이기 때문에, 하나의 작업이 시간이 많이 걸리면 전체 시스템의 성능이 급격하게 떨어진다.
코드의 가독성이 자바 언어에 비해 낮아 유지 보수가 어려워질 수 있다. (예: call back 중첩)
스크립트 언어의 특성 상 해당 언어가 수행되어야 에러가 나는지 확인할 수 있고, 에러가 날 경우 프로세스가 종료된다. = 잘 죽는다
멀티 코어 머신에서 CPU 사용을 최적화 할 수 없다. 따라서 설계시 클러스터 모듈 등을 이용해 하나의 서버에서 여러 노드 프로세스를 사용하는 모델을 지녀야 한다.
세션 등을 공유할 경우 redis와 같은 추가 인프라가 필요하다.
V8엔진은 gc기반 메모리 관리를 하여, Gc시 cpu사용률이 급격히 올라 서버를 멈추게 할 수 있다.
노드 전용 모듈을 사용해야 하는데, 고급 기능이 적어 세밀한 가용성 구현이 어렵다.
이벤트 기반 프로그래밍으로 전환하는 데에 시간이 걸린다.

정리
개발은 빠르고 쉽다는 장점이 있으나, 운영 관점에서 테스트, 장애 대응, 디버깅 등이 약점이다.

--------------------------------------------------------------------------------------------------------------------------------------
결론
java: 네트워크 기술에 대한 큰 구조에 대해 이해하기 힘들면 접근이 힘들고, 수정 사항이 발생하면 수정 후 백업하기까지 오래 걸리며, 메모리도 어느 정도 필요하고 코드 작성도 난이도가 높다. 그러나 성능이 좋고 안정적이며 보안이 좋다. 공기업과 대기업, 연구시설, 금융기관 등에서 많이 사용한다. 전자정부 프레임워크(정부)는 자바로 작성된 케이스가 훨씬 많다.

node.js: java에 비해 진입 장벽이 낮고, 업그레이드나 배포가 빠르며, 많은 연결을 동시에 처리할 수 있는 빠른 서버. 복잡한 과정도 없어 쉽지만, 유지 보수 면에서 불안정한 편이다. 수정 작업이 길어질 경우 시스템 성능이 급격히 나빠진다. 인터넷 환경에서 콘텐츠 산업이 점점 부흥하는 추세인 만큼 영상과 이미지를 많이 다루는 사이트 및 외국 기업이나 신생 기업에서 많이 쓴다.

내 의견: 결론부터 말하면 나는 node js가 좋을 것 같다. 자바는 안정적이고 범용성 좋고 메모리 좀 잡아먹는 거랑 백업에 적합하지 않은 거 제외하면 최고의 백엔드 개발언어지만, 개인적으로 자바 스프링을 살짝 다뤄본 바 웹페이지와 브라우저, 네트워크의 원리에 대한 대략적인 이해가 없으면 유지보수하기 좀 힘들었던 것 같다. 코드도 길고 복잡한 편이다. 선생님께서 설명을 잘 해주실 것 같기도 하고, 많이 다루는 언어를 골라서 어느 기업을 공략할 지 선택지를 늘리는 것도 좋지만, 일단 극초보자인 우리가 접근하기 쉬운 언어를 골라서 빠르게 익히고 빨리 익숙해지는 것도 초심자에게 나쁘지 않다고 생각한다.
내가 찾아본 바론 이런데 선생님께서 어느 쪽이든 잘 가르쳐주실 거라고 하셨으니 수료할 때 쯤 우리가 자바를 잘 다루게 된다면 그건 엄청난 메리트긴 해서 갈등이 된다. 구인구직 사이트 보니까 공기업으로 서치하면 node js는 하나도 없더라... 요즘 많이 쓴다고는 하는데 그럼에도 아직까지 한국은 자바가 매우 우세인 언어인걸까 싶었다. 
